Topi-1  Pre-requisite

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Birthday  Pardox

<Link for video solution>
<link for Textual Explanation>
1.) https://en.wikipedia.org/wiki/Birthday_problem
2.) https://en.wikipedia.org/wiki/Birthday_attack
3.) https://en.wikipedia.org/wiki/Stirling_numbers_of_the_second_kind
4.) https://en.wikipedia.org/wiki/Knapsack_problem
5.) https://en.wikipedia.org/wiki/Cutting_stock_problem; https://en.wikipedia.org/wiki/List_of_knapsack_problems; https://en.wikipedia.org/wiki/Packing_problems
6.) https://en.wikipedia.org/wiki/Continuous_knapsack_problem; https://en.wikipedia.org/wiki/Change-making_problem; https://en.wikipedia.org/wiki/Combinatorial_auction
7.) 

code:
1). C++ :
// C++ program to approximate number of people in Birthday Paradox  
// problem 
#include <cmath> 
#include <iostream> 
using namespace std; 
  
// Returns approximate number of people for a given probability 
int find(double p) 
{ 
    return ceil(sqrt(2*365*log(1/(1-p)))); 
} 
  
int main() 
{ 
   cout << find(0.70); 
} 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.)Python :
# Python3 code to approximate number 
# of people in Birthday Paradox problem 
import math 

# Returns approximate number of 
# people for a given probability 
def find( p ): 
	return math.ceil(math.sqrt(2 * 365 *
					math.log(1/(1-p)))); 

# Driver Code 
print(find(0.70))

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Big Integer Problems

<link for video solution>
<link for textual explanation>
1.) https://www.geeksforgeeks.org/factorial-large-number
2). https://www.geeksforgeeks.org/biginteger-class-in-java
3.) https://www.geeksforgeeks.org/find-the-length-of-factorial-of-a-number-in-any-given-base/?ref=rp

<Additional Resources needed>
1.) https://dev.to/remonhasan/kamenetsky-s-algorithm-3gj9        	(For number of digits in a factorial)
                                        f(x) =    log10( ((n/e)^n) * sqrt(2*pi*n))

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
1.) Problem to find last digit of a factorial in any base ( Kamenetsky Algorithm )

C++ code:
// A optimised program to find the 
// number of digits in a factorial in base b 
#include <bits/stdc++.h> 
using namespace std; 

// Returns the number of digits present 
// in n! in base b Since the result can be large 
// long long is used as return type 
long long findDigits(int n, int b) 
{ 
	// factorial of -ve number 
	// doesn't exists 
	if (n < 0) 
		return 0; 

	// base case 
	if (n <= 1) 
		return 1; 

	// Use Kamenetsky formula to calculate 
	// the number of digits 
	double x = ((n * log10(n / M_E) + 
				log10(2 * M_PI * n) / 
				2.0)) / (log10(b)); 

	return floor(x) + 1; 
} 

// Driver Code 
int main() 
{ 
	//calling findDigits(Number, Base) 
	cout << findDigits(4, 16) << endl; 
	cout << findDigits(5, 8) << endl; 
	cout << findDigits(12, 16) << endl; 
	cout << findDigits(19, 13) << endl; 
	return 0; 
} 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Python code:
from math import log10,floor 

# A optimised program to find the 
# number of digits in a factorial in base b 

# Returns the number of digits present 
# in n! in base b Since the result can be large 
# long long is used as return type 
def findDigits(n, b): 
	
	# factorial of -ve number 
	# doesn't exists 
	if (n < 0): 
		return 0
	
	M_PI = 3.141592
	M_E = 2.7182

	# base case 
	if (n <= 1): 
		return 1

	# Use Kamenetsky formula to calculate 
	# the number of digits 
	x = ((n * log10(n / M_E) + log10(2 * M_PI * n) / 2.0)) / (log10(b)) 

	return floor(x) + 1

# Driver Code 
if __name__ == '__main__': 
	
	#calling findDigits(Number, Base) 
	print(findDigits(4, 16)) 
	print(findDigits(5, 8)) 
	print(findDigits(12, 16)) 
	print(findDigits(19, 13)) 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 2.)MDAS factorial Problem (Factorial with a twist) 
 
 Naive Algo speed = O(N)    Best Speed = O(1)
 Example= MDAS factorial of N=N!=N*(N-1)/(N-2)+(N-3)-(N-4)...... upto 1
 
If we observe carefully it can be concluded that:

--If N is less than or equal to 2 then answer will be N itself.
--If N is 3 OR N is 4, the answer is N + 3.
--If (N – 4) is completely divisible by 4, the answer is N + 1.
--If (N – 4) gives remainder 1 OR 2 while dividing by 4, the answer is N + 2.
--For the remaining values, the answer will be N – 1

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
1.) C++ code:-

// C++ Program to find MDAS_Factorial 
#include <bits/stdc++.h> 
using namespace std; 

// Program to find MDAS_factorial 
int MDAS_Factorial(int N) 
{ 
	if (N <= 2) 
		return N; 

	if (N <= 4) 
		return (N + 3); 

	if ((N - 4) % 4 == 0) 
		return (N + 1); 

	else if ((N - 4) % 4 <= 2) 
		return (N + 2); 

	else
		return (N - 1); 
} 

// Driver code 
int main() 
{ 

	int N = 4; 
	cout << MDAS_Factorial(N) << endl; 
	N = 10; 
	cout << MDAS_Factorial(N) << endl; 

	return 0; 
} 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.) Python code:-

# Python3 code find MDAS_Factorial 
def MDAS_Factorial( N ): 
	
	if N <= 2: 
		return N 

	if N <= 4: 
		return N + 3
		
	if (N - 4) % 4 == 0: 
		return N + 1

	elif (N - 4) % 4 <= 2: 
		return N + 2

	else: 
		return N - 1

# Driver code 
N = 4
print(MDAS_Factorial( N ) ) 

N = 10
print(MDAS_Factorial( N ) ) 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

3.) Finding the next Smallest Palindrome Number from given number N

<video link explaining the problem>
<Textual links explaining the problem>
1.) https://www.geeksforgeeks.org/given-a-number-find-next-smallest-palindrome-larger-than-this-number/?ref=rp

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
C++ code:
#include <stdio.h> 

// A utility function to print an array 
void printArray (int arr[], int n); 

// A utility function to check if num has all 9s 
int AreAll9s (int num[], int n ); 

// Returns next palindrome of a given number num[]. 
// This function is for input type 2 and 3 
void generateNextPalindromeUtil (int num[], int n ) 
{ 
	// find the index of mid digit 
	int mid = n/2; 

	// A bool variable to check if copy of left side to right is sufficient or not 
	bool leftsmaller = false; 

	// end of left side is always 'mid -1' 
	int i = mid - 1; 

	// Beginning of right side depends if n is odd or even 
	int j = (n % 2)? mid + 1 : mid; 

// Initially, ignore the middle same digits 
	while (i >= 0 && num[i] == num[j]) 
		i--,j++; 

	// Find if the middle digit(s) need to be incremented or not (or copying left 
	// side is not sufficient) 
	if ( i < 0 || num[i] < num[j]) 
		leftsmaller = true; 

	// Copy the mirror of left to tight 
	while (i >= 0) 
	{ 
		num[j] = num[i]; 
		j++; 
		i--; 
	} 

	// Handle the case where middle digit(s) must be incremented. 
	// This part of code is for CASE 1 and CASE 2.2 
	if (leftsmaller == true) 
	{ 
		int carry = 1; 
		i = mid - 1; 

		// If there are odd digits, then increment 
		// the middle digit and store the carry 
		if (n%2 == 1) 
		{ 
			num[mid] += carry; 
			carry = num[mid] / 10; 
			num[mid] %= 10; 
			j = mid + 1; 
		} 
		else
			j = mid; 

		// Add 1 to the rightmost digit of the left side, propagate the carry 
		// towards MSB digit and simultaneously copying mirror of the left side 
		// to the right side. 
		while (i >= 0) 
		{ 
			num[i] += carry; 
			carry = num[i] / 10; 
			num[i] %= 10; 
			num[j++] = num[i--]; // copy mirror to right 
		} 
	} 
} 

// The function that prints next palindrome of a given number num[] 
// with n digits. 
void generateNextPalindrome( int num[], int n ) 
{ 
	int i; 

	printf("Next palindrome is:"); 

	// Input type 1: All the digits are 9, simply o/p 1 
	// followed by n-1 0's followed by 1. 
	if( AreAll9s( num, n ) ) 
	{ 
		printf( "1 "); 
		for( i = 1; i < n; i++ ) 
			printf( "0 " ); 
		printf( "1" ); 
	} 

	// Input type 2 and 3 
	else
	{ 
		generateNextPalindromeUtil ( num, n ); 

		// print the result 
		printArray (num, n); 
	} 
} 

// A utility function to check if num has all 9s 
int AreAll9s( int* num, int n ) 
{ 
	int i; 
	for( i = 0; i < n; ++i ) 
		if( num[i] != 9 ) 
			return 0; 
	return 1; 
} 

/* Utility that prints out an array on a line */
void printArray(int arr[], int n) 
{ 
	int i; 
	for (i=0; i < n; i++) 
		printf("%d ", arr[i]); 
	printf("\n"); 
} 

// Driver Program to test above function 
int main() 
{ 
	int num[] = {9, 4, 1, 8, 7, 9, 7, 8, 3, 2, 2}; 

	int n = sizeof (num)/ sizeof(num[0]); 

	generateNextPalindrome( num, n ); 

	return 0; 
} 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Python code:
# Returns next palindrome of a given number num[]. 
# This function is for input type 2 and 3 
def generateNextPalindromeUtil (num, n) : 

	# find the index of mid digit 
	mid = int(n/2 ) 

	# A bool variable to check if copy of left 
	# side to right is sufficient or not 
	leftsmaller = False

	# end of left side is always 'mid -1' 
	i = mid - 1

	# Beginning of right side depends 
	# if n is odd or even 
	j = mid + 1 if (n % 2) else mid 

	# Initially, ignore the middle same digits 
	while (i >= 0 and num[i] == num[j]) : 
		i-=1
		j+=1

	# Find if the middle digit(s) need to be 
	# incremented or not (or copying left 
	# side is not sufficient) 
	if ( i < 0 or num[i] < num[j]): 
		leftsmaller = True

	# Copy the mirror of left to tight 
	while (i >= 0) : 
	
		num[j] = num[i] 
		j+=1
		i-=1
	

	# Handle the case where middle 
	# digit(s) must be incremented. 
	# This part of code is for CASE 1 and CASE 2.2 
	if (leftsmaller == True) : 
	
		carry = 1
		i = mid - 1

		# If there are odd digits, then increment 
		# the middle digit and store the carry 
		if (n%2 == 1) : 
		
			num[mid] += carry 
			carry = int(num[mid] / 10 ) 
			num[mid] %= 10
			j = mid + 1
		
		else: 
			j = mid 

		# Add 1 to the rightmost digit of the 
		# left side, propagate the carry 
		# towards MSB digit and simultaneously 
		# copying mirror of the left side 
		# to the right side. 
		while (i >= 0) : 
		
			num[i] += carry 
			carry = num[i] / 10
			num[i] %= 10
			num[j] = num[i] # copy mirror to right 
			j+=1
			i-=1
		
# The function that prints next 
# palindrome of a given number num[] 
# with n digits. 
def generateNextPalindrome(num, n ) : 

	print("\nNext palindrome is:") 

	# Input type 1: All the digits are 9, simply o/p 1 
	# followed by n-1 0's followed by 1. 
	if( AreAll9s( num, n ) == True) : 
	
		print( "1") 
		for i in range(1, n): 
			print( "0" ) 
		print( "1") 
	

	# Input type 2 and 3 
	else: 
	
		generateNextPalindromeUtil ( num, n ) 

		# print the result 
		printArray (num, n) 
	
# A utility function to check if num has all 9s 
def AreAll9s(num, n ): 
	for i in range(1, n): 
		if( num[i] != 9 ) : 
			return 0
	return 1


# Utility that prints out an array on a line 
def printArray(arr, n): 

	for i in range(0, n): 
		print(int(arr[i]),end=" ") 
	print() 


# Driver Program to test above function 
if __name__ == "__main__": 
	num = [9, 4, 1, 8, 7, 9, 7, 8, 3, 2, 2] 
	n = len(num) 
	generateNextPalindrome( num, n ) 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Finding the next Palindrome+Prime Number


<link for video solution>
<link for textual expalnation of problems>

For any palindrome with even digits:
abcddcba % 11
= (a * 10000001 + b * 100001 * 10 + c * 1001 * 100 + d * 11 * 1000) % 11
= 0

All palindrome with even digits is multiple of 11.
So among them, 11 is the only one prime
if (8 <= N <= 11) return 11
For other, we consider only palindrome with odd digits.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
// CPP program to find next palindromic 
// prime for a given number. 
#include <iostream> 
#include <string> 
using namespace std; 

bool isPrime(int num) 
{ 
	if (num < 2 || num % 2 == 0) 
		return num == 2; 
	for (int i = 3; i * i <= num; i += 2) 
		if (num % i == 0) 
			return false; 
	return true; 
} 

int primePalindrome(int N) 
{ 
	// if(8<=N<=11) return 11 
	if (8 <= N && N <= 11) 
		return 11; 

	// generate odd length palindrome number 
	// which will cover given constraint. 
	for (int x = 1; x < 100000; ++x) { 
	
		string s = to_string(x), r(s.rbegin(), s.rend()); 
		int y = stoi(s + r.substr(1)); 
	
		// if y>=N and it is a prime number 
		// then return it. 
		if (y >= N && isPrime(y)) 
			return y; 
	} 

	return -1; 
} 

// Driver code 
int main() 
{ 
	cout << primePalindrome(112); 
	return 0; 
} 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Python code:
# Python3 program to find next palindromic 
# prime for a given number. 
import math as mt 

def isPrime(num): 

	if (num < 2 or num % 2 == 0): 
		return num == 2
	for i in range(3, mt.ceil(mt.sqrt(num + 1))): 
		if (num % i == 0): 
			return False
	return True

def primePalindrome(N): 

	# if(8<=N<=11) return 11 
	if (8 <= N and N <= 11): 
		return 11

	# generate odd length palindrome number 
	# which will cover given constraint. 
	for x in range(1, 100000): 
	
		s = str(x) 
		d = s[::-1] 
		y = int(s + d[1:]) 
	
		# if y>=N and it is a prime number 
		# then return it. 
		if (y >= N and isPrime(y)): 
			return y 
	
# Driver code 
print(primePalindrome(112)) 
